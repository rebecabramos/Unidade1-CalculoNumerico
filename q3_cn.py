# -*- coding: utf-8 -*-
"""Q3-cn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gfuNK1jhmLSWHDV-SmbDgbV7yhDkAhZs
"""

from numpy import linspace
from numpy import sqrt, exp, cos, sin
from matplotlib.pyplot import plot,legend

import inspect, re

#Parametros
f = '500+0.453*x+4.1*10**-5*x**2+2.1*10**-7*x**3+4.453*10**-10*x**4+1000+0.22*x+6.453*10**-5*x**2+8.453*10**-7*x**3-1500'  # funcao
tol = 10**-6               # tolerancia
nmax = 25                  # numero maximo de iteracoes
var = 'x'
plotar = True

# Método da Secante

def secante(xa,xb,f,tol,nmax,var,plotar):

    f = eval('lambda x:' + f)

    # imprime estimativas iniciais
    print('Estimativas iniciais: xa = {0}; xb = {1} \n'.format(xa,xb))  

    # Loop 
    for i in range(0,nmax):
        
        x = (xa*f(xb) - xb*f(xa))/(f(xb) - f(xa))
                        
        e = abs(x-xb)/abs(x) # erro
        
        # tabela
        print('{0:d}  {1:f}  {2:f}  {3:e}'.format(i,x,f(x),e))
        
        if e < tol:
            break
        xa = xb
        xb = x
        
    if i == nmax:
        print('Solução não obtida em {0:d} iterações'.format(nmax))
    else:
        print('Solução obtida: x = {0:.10f}'.format(x))

    # plotagem
    if plotar:        
        delta = 1*x
        dom = linspace(x-delta,x+delta,30)
        plot(dom,f(dom),x,f(x),'ro')

    return x

# chamada da função
ms = secante(-2400.0,-2600.0,f,tol,nmax,var,plotar)